# azure-pipeline.yml
# Reusable Terraform pipeline template leveraging Run-AzTerraform.ps1 and LibreDevOpsHelpers

parameters:
  - name: TerraformCodeLocation
    type: string
    default: 'terraform'
  - name: TerraformStackToRun
    type: object
    default: ['all']
  - name: TerraformWorkspace
    type: string
    default: 'dev'
  - name: RunTerraformInit
    type: string
    values: ["true", "false"]
    default: "true"
  - name: RunTerraformPlan
    type: string
    values: ["true", "false"]
    default: "true"
  - name: RunTerraformPlanDestroy
    type: string
    values: ["true", "false"]
    default: "false"
  - name: RunTerraformApply
    type: string
    values: ["true", "false"]
    default: "false"
  - name: RunTerraformDestroy
    type: string
    values: ["true", "false"]
    default: "false"
  - name: TerraformPlanExtraArgs
    type: object
    default: []
  - name: TerraformPlanDestroyExtraArgs
    type: object
    default: []
  - name: TerraformApplyExtraArgs
    type: object
    default: []
  - name: TerraformDestroyExtraArgs
    type: object
    default: []
  - name: DebugMode
    type: string
    values: ["true", "false"]
    default: "true"
  - name: DeletePlanFiles
    type: string
    values: ["true", "false"]
    default: "true"
  - name: TerraformVersion
    type: string
    default: 'latest'
  - name: RunCheckov
    type: string
    values: ["true", "false"]
    default: "true"
  - name: CheckovSkipCheck
    type: string
    default: 'CKV2_AZURE_31'
  - name: CheckovSoftfail
    type: string
    values: ["true", "false"]
    default: "true"
  - name: TerraformPlanFileName
    type: string
    default: 'tfplan.plan'
  - name: TerraformDestroyPlanFileName
    type: string
    default: 'tfplan-destroy.plan'
  - name: CreateTerraformWorkspace
    type: boolean
    default: true
  - name: UseAzureClientSecretLogin
    type: boolean
    default: true
  - name: UseAzureOidcLogin
    type: boolean
    default: false
  - name: UseAzureUserLogin
    type: boolean
    default: false
  - name: UseAzureManagedIdentityLogin
    type: boolean
    default: false
  - name: AzureServiceConnection
    type: string
    default: ''
  - name: InstallTenvTerraform
    type: string
    values: ["true", "false"]
    default: "true"
  - name: InstallAzureCli
    type: string
    values: ["true", "false"]
    default: "false"
  - name: AttemptAzureLogin
    type: string
    values: ["true", "false"]
    default: "true"
  - name: InstallCheckov
    type: string
    values: ["true", "false"]
    default: "false"

stages:
  - stage: Terraform
    displayName: 'Terraform: init/plan/apply/destroy'
    jobs:
      - job: RunTerraform
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self

          - task: UseDotNet@2
            displayName: 'Ensure PowerShell 7+ is available'
            inputs:
              packageType: 'sdk'
              version: '7.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: PowerShell@2
            name: RunAzTerraform
            displayName: 'Run Terraform orchestration'
            inputs:
              pwsh: true
              failOnStderr: true
              script: |
                if (-not (Get-Module -ListAvailable -Name LibreDevOpsHelpers)) {
                  Install-Module -Name LibreDevOpsHelpers -Scope CurrentUser -Force
                }

                . "$(Build.SourcesDirectory)\Run-AzTerraform.ps1" `
                  -TerraformCodeLocation           '${{ parameters.TerraformCodeLocation }}' `
                  -TerraformStackToRun             $([string]::Join(',', ${{ parameters.TerraformStackToRun }})) `
                  -TerraformWorkspace              '${{ parameters.TerraformWorkspace }}' `
                  -RunTerraformInit                '${{ parameters.RunTerraformInit }}' `
                  -RunTerraformPlan                '${{ parameters.RunTerraformPlan }}' `
                  -RunTerraformPlanDestroy         '${{ parameters.RunTerraformPlanDestroy }}' `
                  -RunTerraformApply               '${{ parameters.RunTerraformApply }}' `
                  -RunTerraformDestroy             '${{ parameters.RunTerraformDestroy }}' `
                  -TerraformPlanExtraArgs          ${{ parameters.TerraformPlanExtraArgs }} `
                  -TerraformPlanDestroyExtraArgs   ${{ parameters.TerraformPlanDestroyExtraArgs }} `
                  -TerraformApplyExtraArgs         ${{ parameters.TerraformApplyExtraArgs }} `
                  -TerraformDestroyExtraArgs       ${{ parameters.TerraformDestroyExtraArgs }} `
                  -DebugMode                       '${{ parameters.DebugMode }}' `
                  -DeletePlanFiles                 '${{ parameters.DeletePlanFiles }}' `
                  -TerraformVersion                '${{ parameters.TerraformVersion }}' `
                  -RunCheckov                      '${{ parameters.RunCheckov }}' `
                  -CheckovSkipCheck                '${{ parameters.CheckovSkipCheck }}' `
                  -CheckovSoftfail                 '${{ parameters.CheckovSoftfail }}' `
                  -TerraformPlanFileName           '${{ parameters.TerraformPlanFileName }}' `
                  -TerraformDestroyPlanFileName    '${{ parameters.TerraformDestroyPlanFileName }}' `
                  -CreateTerraformWorkspace        '${{ parameters.CreateTerraformWorkspace }}' `
                  -UseAzureClientSecretLogin       '${{ parameters.UseAzureClientSecretLogin }}' `
                  -UseAzureOidcLogin               '${{ parameters.UseAzureOidcLogin }}' `
                  -UseAzureUserLogin               '${{ parameters.UseAzureUserLogin }}' `
                  -UseAzureManagedIdentityLogin    '${{ parameters.UseAzureManagedIdentityLogin }}' `
                  -UseAzureServiceConnection          '${{ parameters.AzureServiceConnection }}' `
                  -InstallTenvTerraform            '${{ parameters.InstallTenvTerraform }}' `
                  -InstallAzureCli                 '${{ parameters.InstallAzureCli }}' `
                  -AttemptAzureLogin               '${{ parameters.AttemptAzureLogin }}' `
                  -InstallCheckov                  '${{ parameters.InstallCheckov }}'
